fn celcius_to_farenheit(celcius: f64) -> f64 {
    return (celcius * 9.0 / 5.0) + 32.0;
}

fn farenheit_to_celcius(farenheit: f64) -> f64 {
    return (farenheit - 32.0) * 5.0 / 9.0;
}

#[test]
fn convert_tests() {
    assert_eq!(celcius_to_farenheit(0.0), 32.0);
    assert_eq!(farenheit_to_celcius(32.0), 0.0);
}

#[test]
fn data_driven_testing_attempt() {
    let inputs: [(f64,f64);72] = [
        (0.0, 32.0),
        (-273.15, -459.67),
        (-50.0, -58.0),
        (-40.0, -40.0),
        (-30.0, -22.0),
        (-20.0, -4.0),
        (-10.0, 14.0),
        (-9.0, 15.8),
        (-8.0, 17.6),
        (-7.0, 19.4),
        (-6.0, 21.2),
        (-5.0, 23.0),
        (-4.0, 24.8),
        (-3.0, 26.6),
        (-2.0, 28.4),
        (-1.0, 30.2),
        (0.0, 32.0),
        (1.0, 33.8),
        (2.0, 35.6),
        (3.0, 37.4),
        (4.0, 39.2),
        (5.0, 41.0),
        (6.0, 42.8),
        (7.0, 44.6),
        (8.0, 46.4),
        (9.0, 48.2),
        (10.0, 50.0),
        (11.0, 51.8),
        (12.0, 53.6),
        (13.0, 55.4),
        (14.0, 57.2),
        (15.0, 59.0),
        (16.0, 60.8),
        (17.0, 62.6),
        (18.0, 64.4),
        (19.0, 66.2),
        (20.0, 68.0),
        (21.0, 69.8),
        (22.0, 71.6),
        (23.0, 73.4),
        (24.0, 75.2),
        (25.0, 77.0),
        (26.0, 78.8),
        (27.0, 80.6),
        (28.0, 82.4),
        (29.0, 84.2),
        (30.0, 86.0),
        (31.0, 87.8),
        (32.0, 89.6),
        (33.0, 91.4),
        (34.0, 93.2),
        (35.0, 95.0),
        (36.0, 96.8),
        (37.0, 98.6),
        (38.0, 100.4),
        (39.0, 102.2),
        (40.0, 104.0),
        (50.0, 122.0),
        (60.0, 140.0),
        (70.0, 158.0),
        (80.0, 176.0),
        (90.0, 194.0),
        (100.0, 212.0),
        (200.0, 392.0),
        (300.0, 572.0),
        (400.0, 752.0),
        (500.0, 932.0),
        (600.0, 1112.0),
        (700.0, 1292.0),
        (800.0, 1472.0),
        (900.0, 1652.0),
        (1000.0, 1832.0)
    ];

    for (c, f) in inputs {

        assert_eq!( round_dp(celcius_to_farenheit(c), 2), f);

        assert_eq!( round_dp(farenheit_to_celcius(f),2), c );
    }
}

/// Round a f64 to the number of decimal places provided.
fn round_dp( value: f64, dp: i32 ) -> f64 {
    let ten: f64 = 10.0;
    let shift: f64 = ten.powi(dp);
    return (value * shift).round() / shift;
}

